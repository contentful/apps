import React, { useState, useEffect, useCallback } from 'react';
import { Flex, Button, Text, Spinner } from '@contentful/f36-components';
import { generateCodeVerifier, generateCodeChallenge } from './pkce';

export type ConnectionState = 'disconnected' | 'connecting' | 'connected';

interface ConnectionComponentProps {
  clientId: string;
  clientSecret: string;
  redirectUri: string;
  accessToken?: string;
  onTokenChange: (token: string) => void;
}

// Use localhost:3001 for local dev, otherwise use same origin
const OAUTH_AUTHORIZE_URL = 'http://localhost:3001/auth/authorize';

export const ConnectionComponent: React.FC<ConnectionComponentProps> = ({
  clientId,
  clientSecret,
  redirectUri,
  accessToken,
  onTokenChange,
}) => {
  const [state, setState] = useState<ConnectionState>(accessToken ? 'connected' : 'disconnected');

  useEffect(() => {
    setState(accessToken ? 'connected' : 'disconnected');
  }, [accessToken]);

  // Listen for token from popup
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      console.log('Received message from popup:', event.data);
      if (event.origin !== window.location.origin) {
        console.log('Ignoring message from different origin:', event.origin);
        return;
      }
      if (event.data.type === 'klaviyo_oauth_token' && event.data.token) {
        console.log('Received OAuth token');
        onTokenChange(event.data.token);
        setState('connected');
      }
    };
    window.addEventListener('message', handleMessage);
    return () => window.removeEventListener('message', handleMessage);
  }, [onTokenChange]);

  const handleConnect = useCallback(async () => {
    setState('connecting');
    // PKCE: generate code_verifier and code_challenge
    const codeVerifier = await generateCodeVerifier();
    const codeChallenge = await generateCodeChallenge(codeVerifier);
    // Store code_verifier in sessionStorage for use in token exchange
    sessionStorage.setItem('klaviyo_pkce_code_verifier', codeVerifier);
    console.log('Generated PKCE values:', {
      hasCodeVerifier: !!codeVerifier,
      hasCodeChallenge: !!codeChallenge,
    });

    const params = new URLSearchParams({
      client_id: clientId,
      client_secret: clientSecret,
      redirect_uri: redirectUri,
      code_challenge_method: 'S256',
      code_challenge: codeChallenge,
      scope: 'full_access',
      response_type: 'code',
      // state will be generated by backend
    });
    const authUrl = `${OAUTH_AUTHORIZE_URL}?${params.toString()}`;
    console.log('Opening OAuth URL:', authUrl);
    window.open(authUrl, 'klaviyo_oauth', 'width=500,height=700');
  }, [clientId, clientSecret, redirectUri]);

  const handleDisconnect = useCallback(() => {
    onTokenChange('');
    setState('disconnected');
  }, [onTokenChange]);

  return (
    <Flex
      alignItems="center"
      justifyContent="space-between"
      style={{ border: '1px solid #E5EBED', borderRadius: '4px', padding: '16px' }}>
      <Flex alignItems="center" gap="spacingM">
        {/* Replace with Klaviyo icon if available */}
        <img src="/klaviyo-icon.svg" alt="Klaviyo" style={{ width: 32, height: 32 }} />
        <Text fontWeight="fontWeightMedium">Klaviyo</Text>
      </Flex>
      <Flex alignItems="center" gap="spacingS">
        {state === 'connecting' ? (
          <>
            <Text style={{ color: '#6B7280' }}>Connecting</Text>
            <Spinner size="small" />
          </>
        ) : state === 'connected' ? (
          <>
            <Text style={{ color: '#10B981' }}>Status: connected</Text>
            <Button variant="negative" size="small" onClick={handleDisconnect}>
              Disconnect
            </Button>
          </>
        ) : (
          <>
            <Text style={{ color: '#6B7280' }}>Status: disconnected</Text>
            <Button variant="primary" size="small" onClick={handleConnect}>
              Connect
            </Button>
          </>
        )}
      </Flex>
    </Flex>
  );
};

export default ConnectionComponent;
