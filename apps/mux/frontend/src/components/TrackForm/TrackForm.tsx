import React, { useState } from 'react';
import { Form, FormControl, Checkbox, TextInput, Select, Option } from '@contentful/f36-forms';
import { Button, Heading } from '@contentful/f36-components';
import CountryDatalist from '../countryDatalist';
import TrackList from '../TrackList/TrackList';
import { countries } from '../../util/countries';
import { Track } from '../../util/types';
import { autoGeneratedLanguages } from '../../util/autoGeneratedLanguages';
import { findLanguageByDisplayName } from '../../util/languageFormatters';
import AutoGeneratedLanguagesDatalist from '../AutoGeneratedLanguagesDatalist';

interface TrackFormProps {
  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
  onDeleteTrack: (trackId: string) => void;
  onUndoDeleteTrack: (trackId: string) => void;
  isTrackPendingDelete: (trackId: string) => boolean;
  tracks: Track[];
  type: 'caption' | 'audio';
  title: string;
  playbackId?: string;
  domain?: string;
  token?: string;
  isSigned?: boolean;
}

const TrackForm: React.FC<TrackFormProps> = ({
  onSubmit,
  onDeleteTrack,
  onUndoDeleteTrack,
  isTrackPendingDelete,
  tracks,
  type,
  title,
  playbackId,
  domain,
  token,
  isSigned,
}) => {
  const [languageCode, setLanguageCode] = useState('');
  const [captionsType, setCaptionsType] = useState<'custom' | 'auto'>('custom');
  const [urlValue, setUrlValue] = useState('');
  const [nameValue, setNameValue] = useState('');

  const clearForm = () => {
    setUrlValue('');
    setNameValue('');
    setLanguageCode('');
  };

  const handleCaptionsTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newType = e.target.value as 'custom' | 'auto';
    setCaptionsType(newType);
    clearForm();
  };

  const handleNameChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    type: 'auto' | 'custom'
  ) => {
    const inputValue = e.target.value;
    setNameValue(inputValue);
    const selectedCountry =
      type === 'custom'
        ? countries.find((country) => country.name === inputValue)
        : findLanguageByDisplayName(autoGeneratedLanguages, inputValue);
    if (selectedCountry) {
      setLanguageCode(selectedCountry.code);
    }
  };

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUrlValue(e.target.value);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    onSubmit(e);
    clearForm();
  };

  return (
    <>
      <TrackList
        tracks={tracks}
        onDeleteTrack={onDeleteTrack}
        onUndoDeleteTrack={onUndoDeleteTrack}
        isTrackPendingDelete={isTrackPendingDelete}
        type={type}
        playbackId={playbackId}
        domain={domain}
        token={token}
        isSigned={isSigned}
      />
      <Form onSubmit={handleSubmit}>
        <Heading as="h3">{title}</Heading>

        {type === 'caption' && (
          <FormControl>
            <FormControl.Label>Captions Type</FormControl.Label>
            <Select value={captionsType} onChange={handleCaptionsTypeChange} name="captionsType">
              <Option value="custom">Custom Captions</Option>
              <Option value="auto">Auto Generated Captions</Option>
            </Select>
          </FormControl>
        )}

        {type === 'caption' && captionsType === 'auto' ? (
          <>
            <FormControl isRequired>
              <FormControl.Label>Audio Name</FormControl.Label>
              <TextInput
                type="text"
                name="name"
                value={nameValue}
                onChange={(e) => handleNameChange(e, captionsType)}
                list="autogenlanguages"
                placeholder="Type or select a language"
              />
              <AutoGeneratedLanguagesDatalist />
            </FormControl>
            <FormControl isRequired>
              <FormControl.Label>Language Code</FormControl.Label>
              <TextInput
                type="text"
                name="languagecode"
                value={languageCode}
                onChange={(e) => setLanguageCode(e.target.value)}
                isReadOnly
              />
              <FormControl.HelpText>
                For accurate handling, make sure you select the spoken language in your video.
              </FormControl.HelpText>
            </FormControl>
          </>
        ) : (
          <>
            <FormControl isRequired>
              <FormControl.Label>File URL</FormControl.Label>
              <TextInput type="url" name="url" value={urlValue} onChange={handleUrlChange} />
            </FormControl>
            <FormControl isRequired>
              <FormControl.Label>Audio Name</FormControl.Label>
              <TextInput
                type="text"
                name="name"
                value={nameValue}
                onChange={(e) => handleNameChange(e, captionsType)}
                list="countrycodes"
              />
            </FormControl>
            <FormControl isRequired>
              <FormControl.Label>Language Code</FormControl.Label>
              <TextInput
                type="text"
                name="languagecode"
                value={languageCode}
                onChange={(e) => setLanguageCode(e.target.value)}
              />
              <CountryDatalist used={tracks} />
            </FormControl>
            {type === 'caption' && (
              <FormControl>
                <Checkbox name="closedcaptions">Closed Captions</Checkbox>
              </FormControl>
            )}
          </>
        )}
        <Button variant="secondary" type="submit">
          Submit
        </Button>
      </Form>
    </>
  );
};

export default TrackForm;
