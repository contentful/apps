import { FC, useState, useEffect } from 'react';
import {
  FormControl,
  Select,
  Option,
  Checkbox,
  TextInput,
  TextLink,
} from '@contentful/f36-components';
import { ExternalLinkIcon } from '@contentful/f36-icons';
import CountryDatalist from '../countryDatalist';
import { countries } from '../../util/countries';
import { autoGeneratedLanguages } from '../../util/autoGeneratedLanguages';
import { formatLanguageDisplay, findLanguageByDisplayName } from '../../util/languageFormatters';
import AutoGeneratedLanguagesDatalist from '../AutoGeneratedLanguagesDatalist';

export type CaptionsConfig =
  | {
      captionsType: 'off';
      languageCode?: null;
      languageName?: null;
      closedCaptions?: null;
      url?: null;
    }
  | {
      captionsType: 'auto' | 'custom';
      languageCode: string;
      languageName: string;
      closedCaptions?: boolean;
      url?: string;
    };

interface CaptionsConfigurationProps {
  captionsConfig: CaptionsConfig;
  onCaptionsChange: (value: CaptionsConfig) => void;
  onValidationChange?: (isValid: boolean) => void;
}

const captionsTypeDescriptions: Record<string, string> = {
  off: 'No captions will be added to your video.',
  auto: 'Captions will be automatically generated based on the spoken language in your video.',
  custom:
    'Upload your own captions file. You can specify the language and whether they are closed captions.',
};

const customCaptionsLink = 'https://www.mux.com/docs/guides/add-subtitles-to-your-videos';
const autoCaptionsLink =
  'https://www.mux.com/docs/guides/add-autogenerated-captions-and-use-transcripts';

export const CaptionsConfiguration: FC<CaptionsConfigurationProps> = ({
  captionsConfig,
  onCaptionsChange,
  onValidationChange,
}) => {
  const [languageInputValue, setLanguageInputValue] = useState('');
  const [languageError, setLanguageError] = useState<boolean>(false);
  const [urlError, setUrlError] = useState<boolean>(false);

  useEffect(() => {
    validateCaptions();
  }, [captionsConfig]);

  const validateCaptions = () => {
    let isValid = true;
    setLanguageError(false);
    setUrlError(false);

    if (captionsConfig.captionsType !== 'off') {
      // Validate language
      const languageExists =
        captionsConfig.captionsType === 'auto'
          ? !!findLanguageByDisplayName(autoGeneratedLanguages, captionsConfig.languageName)
          : countries.some((c) => c.name === captionsConfig.languageName);

      if (!languageExists) {
        setLanguageError(true);
        isValid = false;
      }

      // Validate existing URL
      if (
        captionsConfig.captionsType === 'custom' &&
        (!captionsConfig.url || captionsConfig.url.trim() === '')
      ) {
        setUrlError(true);
        isValid = false;
      }
    }

    onValidationChange?.(isValid);
  };

  const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newType = e.target.value;
    setLanguageInputValue('');
    if (newType === 'off') {
      onCaptionsChange({ captionsType: 'off' });
    } else if (newType === 'auto' || newType === 'custom') {
      onCaptionsChange({
        captionsType: newType,
        languageCode: '',
        languageName: '',
        closedCaptions: false,
        url: '',
      });
    } else {
      throw new Error('Unsupported type');
    }
  };

  const handleLanguageInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    setLanguageInputValue(inputValue);
    let found;
    if (captionsConfig.captionsType === 'auto') {
      found = findLanguageByDisplayName(autoGeneratedLanguages, inputValue);
    } else if (captionsConfig.captionsType === 'custom') {
      found = countries.find((l) => l.name === inputValue);
    }
    onCaptionsChange({
      ...captionsConfig,
      languageCode: found ? found.code : '',
      languageName: found
        ? captionsConfig.captionsType === 'auto'
          ? formatLanguageDisplay(found)
          : found.name
        : '',
    });
  };

  const handleClosedCaptionsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (captionsConfig.captionsType !== 'off') {
      onCaptionsChange({ ...captionsConfig, closedCaptions: e.target.checked });
    }
  };

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (captionsConfig.captionsType !== 'off') {
      onCaptionsChange({ ...captionsConfig, url: e.target.value });
    }
  };

  return (
    <>
      <FormControl>
        <FormControl.Label>Captions Type</FormControl.Label>
        <Select value={captionsConfig.captionsType} onChange={handleTypeChange} name="captionsType">
          <Option value="off">Off</Option>
          <Option value="auto">Auto Generated Captions</Option>
          <Option value="custom">Custom Captions</Option>
        </Select>
        <FormControl.HelpText>
          {captionsTypeDescriptions[captionsConfig.captionsType]}
          {captionsConfig.captionsType !== 'off' && (
            <TextLink
              icon={<ExternalLinkIcon />}
              variant="secondary"
              href={captionsConfig.captionsType === 'auto' ? autoCaptionsLink : customCaptionsLink}
              target="_blank"
              rel="noopener noreferrer"
            />
          )}
        </FormControl.HelpText>
      </FormControl>

      {captionsConfig.captionsType !== 'off' && (
        <>
          <FormControl isInvalid={languageError}>
            <FormControl.Label>Language</FormControl.Label>
            <TextInput
              name="language"
              list={captionsConfig.captionsType === 'auto' ? 'autogenlanguages' : 'countrycodes'}
              onChange={handleLanguageInput}
              value={languageInputValue}
              placeholder="Type or select a language"
            />
            {languageError && (
              <FormControl.ValidationMessage>
                Please select a valid language
              </FormControl.ValidationMessage>
            )}
            {captionsConfig.captionsType === 'custom' && <CountryDatalist used={[]} />}
            {captionsConfig.captionsType === 'auto' && (
              <>
                <AutoGeneratedLanguagesDatalist />
                <FormControl.HelpText>
                  For accurate handling, make sure you select the spoken language in your video.
                </FormControl.HelpText>
              </>
            )}
          </FormControl>

          {captionsConfig.captionsType === 'custom' && (
            <>
              <FormControl>
                <Checkbox
                  isChecked={!!captionsConfig.closedCaptions}
                  onChange={handleClosedCaptionsChange}
                  name="closedCaptions">
                  Closed Captions
                </Checkbox>
                <FormControl.HelpText>
                  Enable this if your captions are intended for the hearing impaired.
                </FormControl.HelpText>
              </FormControl>

              <FormControl isInvalid={urlError}>
                <FormControl.Label>Captions File URL</FormControl.Label>
                <TextInput
                  value={captionsConfig.url || ''}
                  onChange={handleUrlChange}
                  name="captionUrl"
                  placeholder="https://example.com/captions.vtt"
                />
                {urlError && (
                  <FormControl.ValidationMessage>
                    Captions file URL is required
                  </FormControl.ValidationMessage>
                )}
                <FormControl.HelpText>
                  Provide the URL to your captions file (e.g., .vtt or .srt).
                </FormControl.HelpText>
              </FormControl>
            </>
          )}
        </>
      )}
    </>
  );
};

export default CaptionsConfiguration;
