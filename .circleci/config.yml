version: 2.1

orbs:
  node: circleci/node@5.1.0
  vault: contentful/vault@1

commands:
  publish:
    steps:
      - vault/get-secrets:
          template-preset: 'semantic-release-ecosystem'
      - vault/configure-lerna
      - run:
          name: Setup GitHub packages
          command: |
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_PACKAGES_WRITE_TOKEN}" > ~/.npmrc
            echo "@contentful:registry=https://npm.pkg.github.com" >> ~/.npmrc
      - run:
          name: Publish packages
          command: npm run publish-packages

  set_since:
    steps:
      - run:
          name: Set SINCE environment variable
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ] || [ "$CIRCLE_BRANCH" = "staging" ]; then
              echo "export SINCE=HEAD^" >> $BASH_ENV
            else
              echo "export SINCE=master" >> $BASH_ENV
            fi
            source $BASH_ENV

jobs:
  apps-test:
    docker:
      - image: cimg/node:18.20
    resource_class: medium+
    steps:
      - checkout
      - set_since
      - vault/get-secrets:
          template-preset: 'aws-push-artifacts'
      - run:
          name: Install dependencies
          command: |
            npm ci
            npm run bootstrap:ci
      - run:
          name: Check for prettier violations
          command: |
            git fetch origin master # circleci doesn't fetch master by default
            ./.circleci/prettier-check.sh
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Verify project configurations
          command: npm run verify-config
      - run:
          name: Test
          command: npm run test
      - store_artifacts:
          path: /tmp/artifacts

  build:
    docker:
      - image: cimg/node:18.20
    resource_class: medium+
    working_directory: ~/apps
    steps:
      - checkout
      - set_since
      - run:
          name: Install dependencies
          command: |
            npm ci
            npm run bootstrap:ci
      - run:
          name: Build
          command: |
            NODE_ENV='production' \
            npm run build

  build-deploy-staging:
    docker:
      - image: cimg/node:18.20
    resource_class: medium+
    steps:
      - vault/get-secrets:
          template-preset: 'aws-push-artifacts'
      - checkout
      - set_since
      - run:
          name: Bootstrap
          command: |
            npm ci
            npm run bootstrap:ci
      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get install python3-pip python3-dev
            sudo pip3 install awscli
      - run:
          name: Build
          command: |
            REACT_APP_BACKEND_BASE_URL=$BACKEND_BASE_URL_TEST \
            REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_TEST \
            NODE_ENV='staging' \
            npm run build
      - run:
          name: Deploy apps to staging
          command: |
            STATIC_S3_BASE="s3://cf-apps-static-dev/apps-test-$CIRCLE_SHA1" \
                STATIC_JIRA_S3_BASE="s3://cf-apps-static-dev/apps-test-$CIRCLE_SHA1/jira" \
                REACT_APP_BACKEND_BASE_URL=$BACKEND_BASE_URL_TEST \
                REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_TEST \
                STAGE='test' npm run deploy:test
      - run:
          name: Invalidate Slack staging cloudfront distribution
          command: aws cloudfront create-invalidation --distribution-id $SLACK_TEST_CLOUDFRONT_DIST_ID --paths "/*"

  build-deploy-prod:
    docker:
      - image: cimg/node:18.20
    resource_class: medium+
    steps:
      - vault/get-secrets:
          template-preset: 'aws-push-artifacts'
      - checkout
      - set_since
      - run:
          name: Bootstrap
          command: |
            npm ci
            npm run bootstrap:ci
      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get install python3-pip python3-dev
            sudo pip3 install awscli
      - run:
          name: Build
          command: |
            REACT_APP_BACKEND_BASE_URL=$APP_SLACK_BACKEND_BASE_URL_PROD \
            REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_PROD \
            NODE_ENV='production' \
            npm run build
      - publish
      - run:
          name: Deploy apps to prod
          command: |
            STATIC_S3_BASE="s3://cf-apps-static/apps" \
                STATIC_JIRA_S3_BASE="s3://cf-apps-jira" \
                REACT_APP_BACKEND_BASE_URL=$APP_SLACK_BACKEND_BASE_URL_PROD \
                REACT_APP_SLACK_CLIENT_ID=$SLACK_CLIENT_ID_PROD \
                STAGE='prd' npm run deploy
      - run:
          name: Post Deploy
          command: npm run post-deploy
      - run:
          name: Sentry Release
          command: npm run sentry-release
      - run:
          name: Invalidate Slack cloudfront distribution
          command: aws cloudfront create-invalidation --distribution-id $SLACK_PRD_CLOUDFRONT_DIST_ID --paths "/*"

  test-ts-example:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: cd examples/typescript && npm ci
      - run:
          name: Build
          command: cd examples/typescript && npm run build
      - run:
          name: Test
          command: cd examples/typescript && npm run test

  test-js-example:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: cd examples/javascript && npm ci
      - run:
          name: Build
          command: cd examples/javascript && npm run build
      - run:
          name: Test
          command: cd examples/javascript && npm run test

workflows:
  version: 2
  test-deploy:
    jobs:
      - apps-test:
          context:
            - vault
            - apps-staging
      - build:
          context:
            - vault
            - apps-staging
          filters:
            branches:
              ignore:
                - master
                - staging
      - build-deploy-staging:
          context:
            - vault
            - apps-staging
          requires:
            - apps-test
          filters:
            branches:
              only:
                - master
                - staging
      - build-deploy-prod:
          context:
            - vault
            - apps-production
          requires:
            - apps-test
          filters:
            branches:
              only:
                - master
      - test-ts-example
      - test-js-example
